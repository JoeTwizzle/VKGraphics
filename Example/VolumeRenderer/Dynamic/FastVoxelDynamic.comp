#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#define localSizeX  8
#define localSizeY  8
#define localSizeZ  1

#define EPSILON 1e-4
#define FLT_MAX 3.40282347e+38
#define FLT_MIN -3.40282347e+38
#define MAX_DEPTH 1000000
#define PI 3.14159265
#define TWO_PI 6.28318530718
#define ONE_OVER_PI (1.0 / PI)
#define ONE_OVER_2PI (1.0 / TWO_PI)
#define saturate(value) clamp(value, 0.0, 1.0)

layout(local_size_x = localSizeX, local_size_y = localSizeY) in;

struct Ray
{
    vec3 origin;
    vec3 direction;
};

layout(std140, set = 0, binding = 0) uniform CamBuf
{
    mat4 _CameraToWorld;
    mat4 _CameraInverseProjection;
} _CameraProperites;

layout(std430, set = 1, binding = 0) buffer VoxDataBuf
{
    uint64_t[] Values;
} _VoxelData;

layout(set = 2, rgba16f, binding = 0) uniform image2D screen;

// --- MATLAB Jet Colour Scheme ---
vec3 spectral_jet(float x)
{
    vec3 c;
    if (x < 0.25)
        c = vec3(0.0, 4.0 * x, 1.0);
    else if (x < 0.5)
        c = vec3(0.0, 1.0, 1.0 + 4.0 * (0.25 - x));
    else if (x < 0.75)
        c = vec3(4.0 * (x - 0.5), 1.0, 0.0);
    else
        c = vec3(1.0, 1.0 + 4.0 * (0.75 - x), 0.0);

    // Clamp colour components in [0,1]
    return saturate(c);
}

Ray CreateRay(vec3 origin, vec3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(vec2 rayCoords)
{
    // Transform the camera origin to world space
    const vec3 origin = (_CameraProperites._CameraToWorld * vec4(0.0, 0.0, 0.0, 1.0)).xyz;

    // Invert the perspective projection of the view-space position
    vec3 direction = (_CameraProperites._CameraInverseProjection * vec4(rayCoords, 0.0, 1.0)).xyz;

    // Transform the direction from camera to world space
    direction = normalize((_CameraProperites._CameraToWorld * vec4(direction, 0.0)).xyz);

    // Avoid divide by zero when rayDir element is zero
//    if (any(equal(direction, vec3(0.0)))) 
//        direction += vec3(equal(direction, vec3(0.0))) * vec3(0.00001);
    return CreateRay(origin, direction);
}

uvec3 PadTwoZerosEx(in uvec3 n)
{
    //Mask to 0-1023
    n &= 0x000003ff;

    n = (n ^ (n << 16)) & 0xff0000ff;
    n = (n ^ (n << 8)) & 0x0300f00f;
    n = (n ^ (n << 4)) & 0x030c30c3;
    n = (n ^ (n << 2)) & 0x09249249;
    return n;
}

uint Interleave3(in uvec3 pos)
{
     uvec3 val = PadTwoZerosEx(pos);
    return val.z | (val.y << 1) | (val.x << 2);
}

const ivec3 NORMALS[6] = ivec3[6](
    ivec3(-1, 0, 0),
    ivec3( 1, 0, 0),
    ivec3(0, -1, 0),
    ivec3(0, 1, 0),
    ivec3(0, 0, -1),
    ivec3(0, 0, 1)
);

const vec3 FACE_COLOR[6] = vec3[6](
    vec3(1.0, 0.0, 0.0), 
    vec3(0.0, 1.0, 0.0), 
    vec3(0.0, 0.0, 1.0), 
    vec3(1.0, 1.0, 0.0), 
    vec3(1.0, 0.0, 1.0), 
    vec3(0.0, 1.0, 1.0)
);

vec3 stepMask(vec3 sideDist) 
{
    bvec3 mask;
    bvec3 b1 = lessThan(sideDist.xyz, sideDist.yzx);
    bvec3 b2 = lessThanEqual(sideDist.xyz, sideDist.zxy);
    mask.z = b1.z && b2.z;
    mask.x = b1.x && b2.x;
    mask.y = b1.y && b2.y;
    if(!any(mask)) // Thank you Spalmer
        mask.z = true;
        
    return vec3(mask);
}

bvec3 andBVec(bvec3 n, bvec3 m) {
    return bvec3(n.x && m.x, n.y && m.y, n.z && m.z);
}
vec3 normies(uint side, vec3 rayDir)
{
    return (vec3(side==0., side==1., side==2.) * sign(-rayDir));
}
const uint chunksPerAxis = (1024 / 4);
const vec3 dirToSun = normalize(vec3(0.4, 0.5, 0.45));
vec4 traceRay(Ray ray)
{
    uint faceId = -1;

    ivec3 gridPos = ivec3(ray.origin);

     // S is rayDir non-negative? 0 / 1
    vec3 S = step(0, ray.direction);

    vec3 stepDir = sign(ray.direction);

    vec3 deltaDist = 1.0/abs(ray.direction);

    vec3 sideDist = (S-stepDir * fract(ray.origin)) * deltaDist;

    // same as vec4(sideDist.xxyy <= sideDist.yzzx);
    vec4 conds = step(sideDist.xxyy, sideDist.yzzx); 

    for (int i = 0; i < 512; i++) 
    {
        if(any(lessThanEqual(vec3(1024), gridPos))) { break; }
        if(any(lessThan(gridPos, vec3(0)))) { break; }

        uvec3 chunkPos = (gridPos >> 2);
        uint chunkIndex = chunkPos.z * chunksPerAxis * chunksPerAxis + chunkPos.y * chunksPerAxis + chunkPos.x;

        uint64_t chunk = _VoxelData.Values[chunkIndex];

//        if(chunk != 0ul)
//        {
//            conds = step(sideDist.xxyy, sideDist.yzzx); 
//            vec3 cases;
//            cases.x = conds.x * conds.y;                 // if       x dir
//            cases.y = (1.0-cases.x) * conds.z * conds.w;  // else if  y dir
//            cases.z = (1.0-cases.x) * (1.0-cases.y);       // else     z dir
//            sideDist += max((2.0*cases-1.0) * deltaDist, 0.0);
//            gridPos += ivec3(cases * stepDir);
//        }
        do
        {  
            if(chunk != 0ul)
            {
                uvec3 localGridPos = gridPos & 3;
                uint chunkTest = localGridPos.z * 4 * 4 + localGridPos.y * 4 + localGridPos.x;
                uint64_t testPos = 1ul << chunkTest;
                if((chunk & testPos) != 0ul)
                {
                    vec3 cases;
                    cases.x = conds.x * conds.y;                 // if       x dir
                    cases.y = (1.0-cases.x) * conds.z * conds.w;  // else if  y dir
                    cases.z = (1.0-cases.x) * (1.0-cases.y);       // else     z dir
                    sideDist += max((2.*cases-1.) * deltaDist, 0.0);
                    vec3 p = gridPos + .5 - stepDir*.5; // Point on axis plane
                    float result = cases.y + 2. * cases.z;
                    vec3 n = normies(uint(result), ray.direction);
                    // Solve ray plane intersection equation: dot(n, ro + t * rd - p) = 0.
                    // for t :
                    float t = (dot(n, p - ray.origin)) / dot(n, ray.direction);
                    vec3 hit = ray.origin + ray.direction * t;
                    return vec4(hit, cases.y + 2. * cases.z);
                }
            }   
            conds = step(sideDist.xxyy, sideDist.yzzx); 
            vec3 cases;
            cases.x = conds.x * conds.y;                 // if       x dir
            cases.y = (1.0-cases.x) * conds.z * conds.w;  // else if  y dir
            cases.z = (1.0-cases.x) * (1.0-cases.y);       // else     z dir
            sideDist += max((2.0*cases-1.0) * deltaDist, 0.0);
            gridPos += ivec3(cases * stepDir);
        } while((gridPos >> 2) == chunkPos);
    }

    return vec4(gridPos, -1);
}


const mat3 sRGBtoAP1 = mat3
(
	0.613097, 0.339523, 0.047379,
	0.070194, 0.916354, 0.013452,
	0.020616, 0.109570, 0.869815
);

vec3 getColorAtRay(Ray ray, out vec4 result)
{
    const vec3 skyColor = vec3(0.3, 0.3, 0.8);
    result = traceRay(ray);
    vec3 color = vec3(0);
    if(result.w != -1)
    {
        vec3 position = result.xyz;
        vec3 normal = normies(uint(result.w), ray.direction);
        
        Ray shadowRay = Ray(vec3(position + normal), dirToSun);
        vec4 shadowResult = traceRay(shadowRay);
        const vec3 directLight = vec3(0.3, 0.9, 0.1);
        
        float brightness = shadowResult.w == -1 ? 1 : 0.2;

        float factor = saturate(dot(vec3(normal), dirToSun) * 0.5 + 1);

        color = directLight * brightness;
//color = normal;
    }
    else
    {
        if(dot(normalize(ray.direction), dirToSun) > 0.99)
        {
            color = vec3(1, 1, 0.8) * 3;
        }
        else
        {
            color = skyColor;
        }
    }
    return color;
}

ivec3 getNormal(uint index)
{
    return NORMALS[index];
}

void main()
{
    ivec2 resolution = imageSize(screen);
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy);
    if(any(greaterThanEqual(pixelPos, resolution)))
    {
        return;
    }
    vec2 uv = vec2((pixelPos + vec2(0.5, 0.5)) / vec2(resolution.x, resolution.y));
    vec2 rayCoords = uv * 2.0 - 1.0;

    Ray ray = CreateCameraRay(rayCoords);


    vec4 hitResult;
    vec3 color;
    color = getColorAtRay(ray, hitResult);
    if(hitResult.w != -1)
    {
        vec3 normal = normies(uint(hitResult.w), ray.direction);
//        color = sign(ray.direction);
//        color = normal;
        ray = Ray(hitResult.xyz + normal, normalize(vec3(reflect(ray.direction, normalize(normal)))));
        color += getColorAtRay(ray, hitResult);
        if(hitResult.w != -1)
        {
            ray = Ray(hitResult.xyz + normal, normalize(vec3(reflect(ray.direction, normalize(normal)))));
            color += getColorAtRay(ray, hitResult);
        }
    }
//    color /= 3;
    imageStore(screen, pixelPos, vec4(color, 1.0));
}