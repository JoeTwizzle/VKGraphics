using OpenTK.Graphics.Vulkan;
using static OpenTK.Graphics.Vulkan.VkFormat;

namespace VKGraphics.Vulkan;

internal static partial class VkFormats
{
    internal static VkFormat VdToVkPixelFormat(PixelFormat format, TextureUsage usage)
    {
        bool toDepthFormat = FormatHelpers.IsDepthFormatPreferred(format, usage);
        return format switch
        {
            PixelFormat.R8UNorm => FormatR8Unorm,
            PixelFormat.R8SNorm => FormatR8Snorm,
            PixelFormat.R8UInt => FormatR8Uint,
            PixelFormat.R8SInt => FormatR8Sint,
            PixelFormat.R16UNorm => toDepthFormat ? FormatD16Unorm : FormatR16Unorm,
            PixelFormat.R16SNorm => FormatR16Snorm,
            PixelFormat.R16UInt => FormatR16Uint,
            PixelFormat.R16SInt => FormatR16Sint,
            PixelFormat.R16Float => FormatR16Sfloat,
            PixelFormat.R32UInt => FormatR32Uint,
            PixelFormat.R32SInt => FormatR32Sint,
            PixelFormat.R32Float => toDepthFormat ? FormatD32Sfloat : FormatR32Sfloat,
            PixelFormat.R8G8UNorm => FormatR8g8Unorm,
            PixelFormat.R8G8SNorm => FormatR8g8Snorm,
            PixelFormat.R8G8UInt => FormatR8g8Uint,
            PixelFormat.R8G8SInt => FormatR8g8Sint,
            PixelFormat.R16G16UNorm => FormatR16g16Unorm,
            PixelFormat.R16G16SNorm => FormatR16g16Snorm,
            PixelFormat.R16G16UInt => FormatR16g16Uint,
            PixelFormat.R16G16SInt => FormatR16g16Sint,
            PixelFormat.R16G16Float => FormatR16g16b16a16Sfloat,
            PixelFormat.R32G32UInt => FormatR32g32Uint,
            PixelFormat.R32G32SInt => FormatR32g32Sint,
            PixelFormat.R32G32Float => FormatR32g32b32a32Sfloat,
            PixelFormat.R8G8B8A8UNorm => FormatR8g8b8a8Unorm,
            PixelFormat.R8G8B8A8UNormSRgb => FormatR8g8b8a8Srgb,
            PixelFormat.B8G8R8A8UNorm => FormatB8g8r8a8Unorm,
            PixelFormat.B8G8R8A8UNormSRgb => FormatB8g8r8a8Srgb,
            PixelFormat.R8G8B8A8SNorm => FormatR8g8b8a8Snorm,
            PixelFormat.R8G8B8A8UInt => FormatR8g8b8a8Uint,
            PixelFormat.R8G8B8A8SInt => FormatR8g8b8a8Sint,
            PixelFormat.R16G16B16A16UNorm => FormatR16g16b16a16Unorm,
            PixelFormat.R16G16B16A16SNorm => FormatR16g16b16a16Snorm,
            PixelFormat.R16G16B16A16UInt => FormatR16g16b16a16Uint,
            PixelFormat.R16G16B16A16SInt => FormatR16g16b16a16Sint,
            PixelFormat.R16G16B16A16Float => FormatR16g16b16a16Sfloat,
            PixelFormat.R32G32B32A32UInt => FormatR32g32b32a32Uint,
            PixelFormat.R32G32B32A32SInt => FormatR32g32b32a32Sint,
            PixelFormat.R32G32B32A32Float => FormatR32g32b32a32Sfloat,
            PixelFormat.Bc1RgbUNorm => FormatBc1RgbUnormBlock,
            PixelFormat.Bc1RgbUNormSRgb => FormatBc1RgbSrgbBlock,
            PixelFormat.Bc1RgbaUNorm => FormatBc1RgbaUnormBlock,
            PixelFormat.Bc1RgbaUNormSRgb => FormatBc1RgbaSrgbBlock,
            PixelFormat.Bc2UNorm => FormatBc2UnormBlock,
            PixelFormat.Bc2UNormSRgb => FormatBc2SrgbBlock,
            PixelFormat.Bc3UNorm => FormatBc3UnormBlock,
            PixelFormat.Bc3UNormSRgb => FormatBc3SrgbBlock,
            PixelFormat.Bc4UNorm => FormatBc4UnormBlock,
            PixelFormat.Bc4SNorm => FormatBc4SnormBlock,
            PixelFormat.Bc5UNorm => FormatBc5UnormBlock,
            PixelFormat.Bc5SNorm => FormatBc5SnormBlock,
            PixelFormat.Bc7UNorm => FormatBc7UnormBlock,
            PixelFormat.Bc7UNormSRgb => FormatBc7SrgbBlock,
            PixelFormat.Etc2R8G8B8UNorm => FormatEtc2R8g8b8UnormBlock,
            PixelFormat.Etc2R8G8B8A1UNorm => FormatEtc2R8g8b8a1UnormBlock,
            PixelFormat.Etc2R8G8B8A8UNorm => FormatEtc2R8g8b8a8UnormBlock,
            PixelFormat.D16UNorm => FormatD16Unorm,
            PixelFormat.D16UNormS8UInt => FormatD16UnormS8Uint,
            PixelFormat.D32Float => FormatD32Sfloat,
            PixelFormat.D32FloatS8UInt => FormatD32SfloatS8Uint,
            PixelFormat.D24UNormS8UInt => FormatD24UnormS8Uint,
            PixelFormat.R10G10B10A2UNorm => FormatA2b10g10r10UnormPack32,
            PixelFormat.R10G10B10A2UInt => FormatA2b10g10r10UintPack32,
            PixelFormat.R11G11B10Float => FormatB10g11r11UfloatPack32,
            _ => throw new VeldridException($"Invalid {nameof(PixelFormat)}: {format}"),
        };
    }
}
